


/* 

CSS RULE = SELECTOR + DECLARATION BLOCK

SELECTOR -> .icon-small -> specifies which HTML elements the style will apply to.
DECLARATION BLOCK -> It is enclosed in { } and contains one or more declarations. 
DECLARATION -> width: 24px; -> consists of a property (what you want to change) and a value (how you want it to look). Declarations are separated by semicolons ; -> In this case, 'width' is the property, and '24px' is the value.

*/



.icon-flag {

    width: 20px;  /* Adjust the width */
    height: 20px; /* Adjust the width */
    vertical-align: middle; /* Adjust vertical alignment */
   
}





.icon-small {

    width: 24px;  /* Adjust the width */
    height: 24px; /* Adjust the width */
    filter: brightness(0) invert(1); /* changes the icon color to white. IT CAN BE USED FOR 'PNG' and 'SVG' IMAGES */
    /* vertical-align: middle; Adjust vertical alignment */

}



















/* Esta es la caja que contiene el logo principal para seleccionar el idioma */

.selected-lang {

    border-radius: 4px;    
    background: transparent; 
    border: 2px solid rgba(232, 232, 236, 0.795);
    text-align: center;
    
}






.lang-menu:hover ul {

    display: block; /* separación desde arriba */

}






.lang-menu {
    
    color: #fff;
    position: absolute;
    top: 80px;   /* separación desde arriba */
    right: 20%;  /* margen relativo al ancho de la pantalla, separación desde la derecha */
    z-index: 1000; /* asegura que quede encima de todo */
    font-size: 20px;
    width: 150px;

}






.lang-menu ul {

    border-radius: 2px;    
    background:transparent;    
    /* box-shadow: 0 0 1px 1px rgb(223, 205, 205);   https://css3generator.com/  para probar la sombra y otras cosas*/
    border: 2px solid rgba(232, 232, 236, 0.795);
    font-family: "Poppins", sans-serif;
    display: none;    

}






.lang-menu ul li {
    
    list-style: none; /* Le quita los puntos a la lista de banderas y palabras */
    width: 150px; /* El hancho del recuadro donde están las banderas y las palabras */
       
}





.lang-menu ul li a {    
    

    list-style: none;
    display: flex;            /* coloca imagen y texto en la misma fila */
    align-items: center;      /* los alinea verticalmente */
    gap: 6px;                 /* espacio entre la bandera y el texto */
    padding: 5px 10px;    
    color: #fff;             /* blanco de inicio. Utilizo esto porque con 'href=' cambia el color de las letras a azul, como si estuviera ya pulsado */
    text-decoration: none;     /* quita subrayado. Utilizo esto porque con 'href=' cambia el color de las letras a azul y aparece todo subrayado */


}




/* .lang-menu ul li a:hover ul -> Se activa cuando pasas el ratón sobre el <a>. Afecta al <ul> que está dentro del <a>. Es decir: hover en el padre (<a>), aplica estilo al hijo (<ul>).*/
/* .lang-menu ul li a:hover -> Se activa cuando pasas el ratón sobre el <a> mismo. El hover ya está ocurriendo directamente sobre el <a> */

.lang-menu ul li a:hover {

background-color: #f2f2f2;
color: #36409b;

}






















/* 

display: flex;-> This property turns the container into a flex container, allowing the use of the flexible box model. 
This means that child elements (in this case, the input field and the icon) will be organized in a single row (or column, depending on other properties) and will behave more predictably in terms of space distribution and alignment.

align-items: center; -> This property vertically aligns all child elements in the center of the flex container. 
This is useful when you want the elements inside .input-box (like the input field and the icon) to be perfectly aligned along the vertical axis.

margin-bottom: 15px; -> This property adds a margin of 15 pixels at the bottom of the container. 
This is used to provide space between this input box and the next element on the page, helping to improve readability and visual separation between form fields. */

.input-box {
    display: flex;            /* Use flexbox to align the elements */
    align-items: center;     /* Vertically align in the center */
 /* margin-bottom: 15px;     /* Space between fields, if necessary */
}









/* 

Applies styles to all elements on the page.

* { ... }: The * selector is a universal selector that selects all elements on the page. 
This means that the styles within the curly braces will apply to all HTML elements.

font-family: "Poppins" (It must be imported in this file: @import url("https://fonts.googleapis.com/css2?family=Poppins:wght........")), sans-serif;: This property sets the font for all elements to the "Poppins" font. 
If this font is not available, any available sans-serif font on the system will be used. This ensures a consistent text appearance across the page. */

* {

    margin: 0; /* This property sets the margin (outer space) of all elements to 0 pixels. This is useful for removing the default margins that some browsers apply to certain elements, ensuring that all elements start from a consistent position. */
    padding: 0; /* This property sets the padding (inner space) of all elements to 0 pixels. Like the margin, this helps remove any default padding, providing a clean start for the layout. */
    box-sizing: border-box; /* This property changes how the width and height of elements are calculated. With border-box, the width and height include the content, padding, and border, making it easier to manage the sizes of elements, as it avoids the total size increasing when adding padding or borders. */
    font-family: "Poppins", sans-serif; /* (It must be imported in this file: @import url("https://fonts.googleapis.com/css2?family=Poppins:wght........")), sans-serif;: This property sets the font for all elements to the "Poppins" font. 
    If this font is not available, any available sans-serif font on the system will be used. This ensures a consistent text appearance across the page. */

}






/*

body { ... }: This rule applies to the <body> element of the HTML page, which contains all the visible content of the document.

min-height: 100vh;: This property sets the minimum height of the <body> to 100 viewport height units. 
This means the body will take up at least 100% of the height of the browser window, ensuring it always fills the screen, even if there is not enough content.
Esta propiedad establece la altura mínima del <body> en 100 unidades de altura del viewport. Esto significa que el cuerpo ocupará al menos el 100% de la altura de la ventana del navegador, asegurando que siempre llene la pantalla, incluso si no hay suficiente contenido.

min-height: 100vh;: En términos prácticos, usar min-height: 100vh; permite un diseño que puede adaptarse a varios tamaños de pantalla sin dejar espacio vacío. 
Si el contenido dentro del <body> excede la altura del viewport, el cuerpo se expandirá más allá de esta altura mínima.



WE CAN USE BOTH OF THEM:
- background: rgb(219, 218, 150);: This property sets the background color of the <body> using RGB values. 
  In this case, the color will be a shade of blue rgb(219, 218, 150).
- background: url('Images/e.png');: Sets an image located at 'Images/e.png' as the background. */

body {

    display: flex; /* This property sets the <body> element to use the flexible box layout model (flexbox) to arrange its content. This allows for more efficient alignment and distribution of space among the child elements. */
    justify-content: center; /* This property aligns the child elements along the horizontal axis (left to right) and centers them within the container. In this case, all elements inside the <body> will be centered horizontally. */
    align-items: center; /* This property aligns the child elements along the vertical axis (top to bottom) and centers them within the container. This means all elements inside the <body> will be centered vertically. */
    min-height: 100vh; /* This property sets the minimum height of the <body> to 100 viewport height units. This means the body will take up at least 100% of the height of the browser window, ensuring it always fills the screen, even if there is not enough content. */
    background: url('../assets/images/green.jpg'); /* Sets an image located at 'Images/e.png' as the background. */
    background-size: cover; /* Scales the image to cover the entire background area without distorting its proportions */
    background-position: center; /* Positions the center of the image in the center of the viewport. */
    
}










/*

.wrapper { ... }: This rule applies to any element that has the class wrapper. 
The class is used to group and apply styles to specific elements in your HTML.

WE CAN USE BOTH OF THEM:
- background: rgb(130, 221, 134);: This property sets the background color of the element. 
  In this case, it uses an RGB value to define a light green color (130, 221, 134). This will provide a visible background behind the content of the element.
- background: transparent; – Makes the background of the box transparent. */

.wrapper {

    width: 100%; /* → hace que el contenedor intente ocupar todo el ancho disponible.  */
    max-width: 420px; /*  le pone un límite al ancho  */
    /* min-height: 300px;  opcional, solo si quieres que la caja nunca se vea “demasiado baja” en pantallas grandes. */ 
    /*  width: 420px; This property sets the width of the element to 420 pixels. This means that the element with the class wrapper will have a fixed width of 420 pixels, regardless of the size of the browser window. */
    background:transparent; /* Makes the background of the box transparent. */
    border: 2px solid rgba(244, 244, 253, 0.295); /* Applies a 2-pixel solid border with a light, semi-transparent color around the box. */
    backdrop-filter: blur(10px); /* Applies a 7-pixel blur effect to the background content behind this element, creating a frosted-glass effect. */
    box-shadow: 0 0 10px rgba(0,0,0,.2); /* Adds a 10-pixel, softly diffused shadow with a semi-transparent black color around the box. */
    color:white; /* This property sets the text color inside the element. By setting it to white, the text will be easily readable against the light green background.  */
    border-radius: 10px; /* Rounds the corners of the box with a 10-pixel radius. */ 
    padding: 30px 40px; /* Adds 30 pixels of space at the top and bottom, and 40 pixels at the left and right, inside the box to provide padding between content and edges. */
    margin: 0 10px; /* The margin creates space outside the element: 0px of margin at the top and bottom. 10px of margin on the left and right sides. The margin ensures that there is space between this element and any other surrounding elements. */

}















/*.wrapper h1 { ... }: This rule applies to all <h1> elements that are within an element with the class wrapper. 
This means that any level 1 heading (h1) contained within an element that has the class wrapper will receive the styles defined in this rule. */

.wrapper h1 {

    font-size: 36px; /* This property sets the font size of the text within the <h1> elements to 36 pixels. This makes the text appear larger and more prominent compared to smaller texts on the page. */
    text-align: center; /* This property centers the text within the container. In this case, the text inside the <h1> elements will be horizontally centered within its parent element, which is the element with the class wrapper. */

}





















/*
The rule .wrapper .input-box applies styles to an element with the class .input-box that is found within an element with the class .wrapper. */

.wrapper .input-box {

    position: relative; /* This property establishes that the element has a relative position. This means it will position itself relative to its original position in the document flow. 
    This property allows absolutely positioned CHILD ELEMENTS TO BE PLACED IN RELATION TO THIS ELEMENT. */
    
    width: 100%; /* This property sets the width of the .input-box elements to 100% of their parent container’s width. This means that the input-box will stretch to fill the entire width of the .wrapper element. */
    height: 50px; /* This property sets the height of the .input-box elements to a fixed value of 50 pixels. This defines how tall each input box will be. */
 /* background: salmon; This property sets the background color of the .input-box elements to a color known as salmon, which is a light reddish-pink hue. This helps distinguish the input boxes visually. */
    margin: 30px 0; /* This property sets the margin for the top and bottom of the .input-box elements to 30 pixels, while the left and right margins are set to 0 pixels. This creates vertical spacing between the input boxes and other elements above and below them. */

}













/* 
.input-box input { ... }: This rule applies to all <input> elements that are within any element that has the class input-box. 
This means that any input field contained in an input-box will receive the styles defined in this rule.

border: none;: This property removes any default border styles that the input field may have, creating a cleaner look initially.
Although both rules end up applying a border of 2px solid rgba(255, 255, 255, .2), the first line in the first block (border: none;) is redundant and unnecessary. 
It will not affect the final visual result, but it can cause confusion because it sets the border to none before redefining it.
Best practice: If you want the border to start from an empty state and then be defined, you can leave the first block as it is. 
However, it is cleaner and clearer to use only the second rule to avoid confusion.


border: 2px solid rgba(255, 255, 255, .2);: This property adds a border to the input field that is 2 pixels wide, solid, and has a color defined by the RGBA value. 
The color is white with 20% opacity (0.2), which gives a subtle and elegant border effect.
Although both rules end up applying a border of 2px solid rgba(255, 255, 255, .2), the first line in the first block (border: none;) is redundant and unnecessary. 
It will not affect the final visual result, but it can cause confusion because it sets the border to none before redefining it.
Best practice: If you want the border to start from an empty state and then be defined, you can leave the first block as it is.
However, it is cleaner and clearer to use only the second rule to avoid confusion. */

.input-box input {

    width: 100%; /* This property sets the width of the input field to 100% of its parent container (input-box). This means that any input field contained in an input-box will receive the styles defined in this rule. */ 
    height: 100%; /* This property sets the height of the input field to 100% of its parent container's height. This makes the input field fill the height of the input-box, allowing for a uniform appearance. */ 
    background: transparent; /* This property makes the background of the input field transparent. This means that the input will inherit the background color of its parent element (input-box), which enhances visual integration. */ 
 /* border: none; */ /* This property removes any default border styles that the input field may have, creating a cleaner look initially. */ 
    outline: none; /* contorno */ /* This property removes the default outline that some browsers apply to input fields when they are focused. This is often done to create a more customized appearance. */ 
    border: 2px solid rgba(244, 244, 253, 0.363); /* This property adds a border to the input field that is 2 pixels wide, solid, and has a color defined by the RGBA value. The color is white with 20% opacity (0.2), which gives a subtle and elegant border effect. */ 
    border-radius: 40px; /* This property rounds the corners of the input field with a radius of 40 pixels. This creates a softer, more modern look, making the input field visually appealing. */ 

    font-size: 16px; /* Specifies the size of the text in the input field. */ 
    color: #fff; /* Changes the text color to white for visibility against a darker background. */ 
    padding: 20px 45px 20px 20px; /* Adds padding to the input field, providing space around the text to enhance usability. */ 

}












/*
The CSS rule .input-box input::placeholder {} is used to apply specific styles to the placeholder text of <input> elements within a container that has the class .input-box.

.input-box: This is a class applied to a container (like a <div>) that contains one or more input fields.

input: This selector targets all input elements (<input>) within the .input-box container.

::placeholder: This is a pseudo-element used to style the placeholder text of an input field. 
The styles defined here will only apply to the text that appears when the input field is empty.

Some browsers automatically apply a value of opacity to placeholders, which can make the color appear lighter. 
To ensure that the white color looks correct, you can explicitly set the opacity. */ 

.input-box input::placeholder {

    color: rgb(255, 255, 255); /* Sets the color of the placeholder text to white (RGB value of 255, 255, 255). This makes the placeholder text stand out against darker backgrounds. */ 
    opacity: 1; /* Ensures that the opacity is full */
    
}
    















/*

THIS RULE WOULD ONLY BE USED IF I WERE TO USE LINKS FOR THE ICONS FROM THE WEB BOXICONS.

.input-box img {

   position:absolute;
   right: 20px;
   top: 50%;
   transform: translateY(-50%);
   font-size: 20px;
    
}

position: absolute;: This sets the image to be positioned absolutely in relation to the nearest container that has position: relative;. 
If there is no such container, it will position itself relative to the <body>.

right: 20px;: Places the image 20 pixels from the right edge of the container.

- top: 50%;: Positions the image at the midpoint of the container from the top, meaning the top edge of the image will be at 50% of the total height of the container.
- top: 50%;: Ubica la imagen en la mitad del contenedor desde la parte superior, lo que significa que el borde superior de la imagen estará en el 50% de la altura total del contenedor.

- transform: translateY(-50%);: This command moves the image up by 50% of its own height. 
This is crucial for vertically centering the image within the container. 
Without this offset, the top of the image would be aligned at 50% of the container, rather than being centered.
- transform: translateY(-50%);: Este comando mueve la imagen hacia arriba un 50% de su propia altura. 
Esto es crucial para centrar verticalmente la imagen en el contenedor. 
Sin este desplazamiento, la parte superior de la imagen estaría alineada al 50% del contenedor, y no centrada.

font-size: 20px;: Although included, this property has no direct effect on an image. 
It is more relevant for text elements.



Why can’t bottom: 50%; be used instead of transform: translateY(-50%); ?

- Incorrect Alignment: If you use bottom: 50%;, the image will move so that its bottom edge aligns with the 50% mark of the container, which will not achieve vertical centering. 
This would make the bottom of the image sit in the center of the container, which is the opposite of what you want.
- Different Behavior: bottom: 50%; positions the image from the bottom edge of the container, while top: 50%; positions it from the top edge. T
he combination of top: 50%; and transform: translateY(-50%); allows for the center of the image to align with the center of the container, which is the desired effect. 

I can do it otherwise: 

.input-box img {

   position:absolute;
   right: 20px;
   bottom: 50%;
   transform: translateY(50%);
   font-size: 20px;
}   

*/

/* 
The rule .input-box img applies styles to image elements (typically <img> tags) that are contained within an element with the class .input-box. Here’s what it does: */

.input-box img {

   position:absolute; /* This sets the image to be positioned absolutely in relation to the nearest container that has position: relative;. If there is no such container, it will position itself relative to the <body>. */ 
   right: 20px; /* Places the image 20 pixels from the right edge of the container. */   
   font-size: 20px; /* Although included, this property has no direct effect on an image. It is more relevant for text elements. */ 
    
}


















/*
The rule .wrapper .remember-forgot applies styling to the .remember-forgot element within a .wrapper container. */

.wrapper .remember-forgot {

    display: flex; /* This makes the container a flex container, allowing its child elements to be positioned along a flexible line. */ 
    justify-content: space-between; /* This spaces the child elements apart, positioning one at the start and the other at the end of the container. */ 
    font-size: 14.5px; /* Sets the font size of text inside the .remember-forgot element to 14.5 pixels. */ 
    margin: -15px 0 15px; /* Adds vertical spacing. The top margin is -15 pixels (moving the element slightly upwards), and the bottom margin is 15 pixels, with no horizontal margins on the sides. */ 
    
}










/*
The rule .remember-forgot label input applies specific styles to the <input> elements within a <label> inside a .remember-forgot container. */

.remember-forgot label input {

    accent-color: #fff; /* Sets the color of certain elements within the <input>, like checkboxes or radio buttons, to white. */   
    margin-right: 3px; /* Adds 3 pixels of space to the right of the <input> element, creating a small gap between it and any following elements (like text). */    

}











/* 
The rule .remember-forgot a applies styling to <a> (anchor/link) elements within a .remember-forgot container. Here’s what each property does: */

.remember-forgot a {

    color: #fff; /* Sets the text color of the link to white. */
    text-decoration: none; /* Removes the underline from the link text, giving it a cleaner appearance. */



}










/* 
The rule .remember-forgot a:hover applies styles to <a> (anchor/link) elements within a .remember-forgot container when they are hovered over by the mouse. Here’s what it does: */

.remember-forgot a:hover {
   
   text-decoration: underline; /* Adds an underline to the link text when the user hovers over it, highlighting it and indicating that it’s interactive. */

}










/* 
The rule .wrapper .btn applies styles to button elements (denoted by <button> or any element styled as a button) that are located within a container that has the class .wrapper.  */

.wrapper .btn {

    width: 100%; /* Sets the button width to 100% of its parent container. */
    height: 45px; /* Defines the height of the button to be 45 pixels. */
    background: #fff; /* Sets the background color of the button to white. */
    border: none; /* Removes the default border of the button. */
    outline: none; /* Removes the outline that appears when the button is focused. */
    border-radius: 40px; /* Applies a 40-pixel radius to the corners of the button, making them rounded. */
    box-shadow: 0 0 10px rgba(0,0,0,.1); /* Adds a subtle shadow around the button. */
    cursor: pointer; /* Changes the cursor to a pointer when hovering over the button, indicating it's clickable. */
    font-size: 16px; /* Sets the font size of the text within the button to 16 pixels. */
    color: #333; /* Sets the text color to a dark gray. */
    font-weight: 600; /* Defines the font weight as semi-bold. */
    
}



.btn:hover {

    background-color: #e9fdc3;

}






/* 
The rule .wrapper .register-link applies styles to link elements (usually <a> tags) with the class .register-link that are found within a container that has the class .wrapper.

text-align: center;: Centers the text within the link, which is useful for alignment, especially when used in block-level containers.

margin: 20px 0 15px;: Adds vertical margins to the link, with 20 pixels at the top, 15 pixels at the bottom, and no margin on the left and right. This provides space around the link, improving its visual separation from other elements. */

.wrapper .register-link {

    font-size: 14.5px; /* Sets the font size of the text in the link to 14.5 pixels, making it larger for better readability. */
    text-align: center; /* Centers the text within the link, ensuring it is aligned nicely in its container. */
    margin: 20px 0 15px; /* Adds vertical margins: 20 pixels at the top, no margin on the sides, and 15 pixels at the bottom, providing space around the link. */

}











/* 
The rule .register-link p a applies styles to anchor link elements (typically <a> tags) that are nested within a <p> tag inside a container with the class .register-link. */

.register-link p a {

    color: #fff; /* Sets the text color of the anchor link to white, ensuring it stands out against the background. */
    text-decoration: none; /* Removes the default underline from the link, giving it a cleaner appearance. */
    font-weight: 600; /* Sets the font weight to semi-bold, making the text slightly bolder for better emphasis. */

}









/* 
The rule .register-link p a:hover applies styles to anchor link elements (typically <a> tags) nested within a <p> tag inside a container with the class .register-link when the mouse hovers over them. */

.register-link p a:hover {
    
     text-decoration: underline; /* Adds an underline to the anchor link when hovered over, indicating that it is interactive. */

}
 





/* This is to adapt the inputs to the window. 
This rule is a media query that applies styles to the elements inside it when the screen width is 576px or less (typically on small devices like smartphones).
@media (max-width: 576px) -> This part defines a media query, which applies styles only when the screen width is 576px or less.
max-width: 576px means the styles inside this query will be activated when the browser window or device screen is smaller than or equal to 576px. This is often used to apply responsive design, ensuring that the layout adapts for smaller screens. */
@media (max-width: 576px) {

    .input-box .input-field{
    
        width:100%; /* This sets the width of the .input-field element to 100% of the parent container's width (in this case, the .input-box). This is done to ensure that the input field takes up the full width of the available space on small screens, making it easier to interact with on mobile devices. */
        margin: 10px 0; /* This adds a margin of 10px to the top and bottom of the .input-field element, and 0px margin on the left and right. The margin ensures there is space above and below the input field, providing better visual separation and preventing the input from being too close to other elements. */
    
    }
    
    
}







/*

EXTRA NOTES

1. The CSS rule .input-box input::placeholder {} is used to apply specific styles to the placeholder text of <input> elements within a container that has the class .input-box.

    .input-box: This is a class applied to a container (like a <div>) that contains one or more input fields.

    input: This selector targets all input elements (<input>) within the .input-box container.

    ::placeholder: This is a pseudo-element used to style the placeholder text of an input field. 
    The styles defined here will only apply to the text that appears when the input field is empty.

*/









